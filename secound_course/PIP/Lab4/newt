import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;


public class DrawPanel extends JPanel {
    public static int CENTER_X;
    public static int CENTER_Y;
    public static final int START_RADIUS = 100;
    private static final int MARGIN = 9;
    private int R = 8;

    public DrawPanel() {
        Color LIGHT_GREEN = new Color(129, 192, 187);
        setBackground(LIGHT_GREEN);
        setSize(462, 462);
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        int w = this.getWidth();
        int h = this.getHeight();
        CENTER_X = this.getWidth() >> 1;
        CENTER_Y = (this.getHeight() + 1) >> 1;

        Scanner sc = new Scanner(System.in);
        System.out.println("Задайте степень полинома:");
        int n = sc.nextInt();

        List<Integer> coefficients = new ArrayList<>(n);
        System.out.println("Задайте коэффициенты для х, начиная со степени " + n);
        for (int i = 0; i <= n; i++) {
            coefficients.add(sc.nextInt());
        }

        drawCoordinate(g, h, w);
        drawSecondFunction(g, -100, 100, coefficients);
    }


    public void drawCoordinate(Graphics g, int h, int w) {
        g.setColor(Color.BLACK);
        g.drawLine(w / 2, 0, w / 2, h);
        g.drawString("Y", w / 2 + MARGIN, MARGIN);

        g.drawLine(0, h / 2, w, h / 2);
        g.drawString("X", w - MARGIN / 2, h / 2 + MARGIN);

        g.drawString("0", w / 2 - 7, h / 2 + 10);
        drawArrow(g, h, w);
    }

    private void drawArrow(Graphics g, int h, int w) {
        g.drawLine(w / 2, 0, w / 2 - 5, 10);
        g.drawLine(w / 2, 0, w / 2 + 5, 10);
        g.drawLine(w, h / 2, w - 10, h / 2 + 5);
        g.drawLine(w, h / 2, w - 10, h / 2 - 5);
    }

    public void drawPolinom(Graphics g, double start, double finish, int[] coefficients, double step) {
        System.out.println("Задайте х");
        double[] x = new double[3];
        double[] y = new double[3];
        x[0] = 0;

        for (int i = 1; i < 3; i++) {
            x[i] = 5 + x[i - 1];
        }

        for (int i = 0; i < 3; i++) {
            y[i] = calculatePolinom(coefficients, x[i]);
        }
        start = -100;
        for (int i = 0; i < 2000; i++) {
            double temp = start;
            double x1 = temp;
            double x2 = temp + step;
            double y1 = newton(x1, 3, x, y, 5);
            double y2 = newton(x2, 3, x, y, 5);
            start = x2;
            g.setColor(Color.YELLOW);
            g.drawLine((int) (new Dot(x1, y1).toPixelsX(START_RADIUS)), (int) (new Dot(x1, y1).toPixelsY(START_RADIUS)), (int) (new Dot(x2, y2).toPixelsX(START_RADIUS)), (int) (new Dot(x2, y2).toPixelsY(START_RADIUS)));
        }
        g.setColor(Color.white);
    }

    public void drawSecondFunction(Graphics g, double start, double finish, List<Integer> coeff) {
        double step = Math.abs(finish - start) / 2000;
        int[] coefficients = calculateCoefficients(coeff);
        for (int i = 0; i < 2000; i++) {
            double x1 = start;
            double x2 = start + step;
            double y1 = calculatePolinom(coefficients, x1);
            double y2 = calculatePolinom(coefficients, x2);
            start = x2;
            g.setColor(Color.BLACK);
            g.drawLine((int) (new Dot(x1, y1).toPixelsX(START_RADIUS)), (int) (new Dot(x1, y1).toPixelsY(START_RADIUS)), (int) (new Dot(x2, y2).toPixelsX(START_RADIUS)), (int) (new Dot(x2, y2).toPixelsY(START_RADIUS)));
        }
        drawPolinom(g, start, finish, coefficients, step);
    }

    public static double calculatePolinom(int[] coefficients, double x) {
        double y = 0;
        for (int j = 0; j < coefficients.length; j++) {
            y += Math.pow(x, j) * coefficients[j];
        }

        return y;
    }

    public static int[] calculateCoefficients(List<Integer> coefficients) {
        int[] coeff = new int[coefficients.size()];

        for (int i = 0; i < coeff.length; i++) {
            coeff[coeff.length - i - 1] = coefficients.get(i);
        }

        return coeff;
    }

    public static double newton(double x, int n, double[] MasX, double[] MasY, double step) {
        //заполяем 1-ую строку х
        // 2-ую y
        double[][] mas = new double[n + 2][n + 1];
        for (int i = 0; i < 2; i++) {
            for (int j = 0; j < n; j++) {
                if (i == 0) {
                    mas[i][j] = MasX[j];
                } else if (i == 1) {
                    mas[i][j] = MasY[j];
                }
            }
        }

        //находим разности
        int m = n;
        for (int i = 2; i < n + 2; i++) {
            for (int j = 0; j < m; j++) {
                mas[i][j] = mas[i - 1][j + 1] - mas[i - 1][j];
            }
            m--;
        }

        //разности y0
        double[] dy0 = new double[n + 1];
        for (int i = 0; i < n + 1; i++) {
            dy0[i] = mas[i + 1][0];
        }

        double res = dy0[0];
        double[] xn = new double[n];
        xn[0] = x - mas[0][0];

        //xn[0] = (x-x0)
        //формула ньютона xn1 = (x-x0)(x-x1)
        //xn[2] = xn1 * (x-x2)
        for (int i = 1; i < n; i++) {
            double ans = xn[i - 1] * (x - mas[0][i]);
            xn[i] = ans;
        }

        //
        int m1 = n + 1;
        int fact = 1;
        for (int i = 1; i < m1; i++) {
            fact = fact * i;
            res = res + (dy0[i] * xn[i - 1]) / (fact * Math.pow(step, i));
        }
        return res;
    }

    public static void exit() {
        Scanner sc = new Scanner(System.in);
        System.out.println("1. Continue");
        System.out.println("2. Exit");
        /*switch(sc.nextInt()){
            case 1: {
                repaint();
                break;
            }
            case 2: {break;}
            default: {break;}
        }*/
    }
}
